import BaseService from "@/services/baseService";
import PostType from "@/types/post";
import ollama from 'ollama'
import { HfInference } from "@huggingface/inference";
import { QuestionChatbotResponse, OllamaGenerateRes } from "@/types/ollamaResponse";
import fbService from "@/services/fbService";
import { MessagingMessage } from "@/types/webhook/facebook/messageEventBody";
import { text } from "stream/consumers";
import huspotConversationService from "@/services/huspotConversationService";


class ChatService extends BaseService {

    private readonly elasticApiBaseUrl = process.env.NEXT_PUBLIC_ELASTIC;

    private readonly apiBaseUrl = `${process.env.NEXT_PUBLIC_API_URL}/api`;

    private readonly clientBaseUrl = process.env.NEXT_PUBLIC_CLIENT_URL;

    private readonly ollamaBaseUrl = `${process.env.NEXT_PUBLIC_OLLAMA}/api`;

    private readonly model_name = "aya:8b"

    private readonly questionPrompt = `ƒê·∫ßu ti√™n t√¥i mu·ªën b·∫°n t√≥m t·∫Øt c√¢u n√≥i m√† ng∆∞·ªùi t√¨m vi·ªác mu·ªën h·ªèi d·ª±a tr√™n nh·ªØng c√¢u h·ªèi m·ªõi nh·∫•t trong ƒëo·∫°n h·ªôi tho·∫°i. N·∫øu c√¢u n√≥i c·ªßa ng∆∞·ªùi d√πng kh√¥ng li√™n quan ƒë·∫øn lƒ©nh v·ª±c t√¨m vi·ªác l√†m th√¨ b·∫°n h√£y vi·∫øt 1 c√¢u xin l·ªói ng·∫Øn g·ªçn m·ªôt c√°ch l·ªãch s·ª± v√¨ kh√¥ng th·ªÉ h·ªó tr·ª£ trong lƒ©nh v·ª±c kh√°c v√† l∆∞u v√†o 'response' v√† 'status' b·∫±ng 0. N·∫øu c√¢u n√≥i li√™n quan ƒë·∫øn lƒ©nh v·ª±c t√¨m vi·ªác l√†m th√¨ b·∫°n c·∫ßn ph·∫£i t√≥m t·∫Øt v√† ƒë·∫ßy ƒë·ªß mong mu·ªën c·ª• th·ªÉ nh·ªØng ƒëi·ªÅu g√¨ ch·∫±ng h·∫°n nh∆∞ l∆∞∆°ng, ƒë·ªãa ƒëi·ªÉm (n·∫øu c√≥) v√† l∆∞u v√†o 'response', l√∫c n√†y 'status' b·∫±ng 1. H√£y ch·∫Øc ch·∫Øn r·∫±ng ph·∫£n h·ªìi c·ªßa b·∫°n l√† 1 object v√† kh√¥ng c√≥ b·∫•t k√¨ k√≠ t·ª± n√†o kh√°c ngo√†i object v√† kh√¥ng c·∫ßn √Ω ki·∫øn c·ªßa b·∫°n. Trong object ƒë√≥ ch·ª©a 2 thu·ªôc t√≠nh l√† 'status' v√† 'response'. V√≠ d·ª•: ƒê√¢y l√† c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n '{'status': 0, 'response': 'Xin l·ªói nh∆∞ng t√¥i kh√¥ng tr·∫£ l·ªùi c√¢u h·ªèi li√™n quan'}' v·ªÅ cu·ªôc h·ªôi tho·∫°i '['role': 'user', 'content': 'B·∫°n bi·∫øt ch∆°i game kh√¥ng']'. B√¢y gi·ªù h√£y t√≥m t·∫Øt cu·ªôc h·ªôi tho·∫°i`



    async getMessage(pageId: string, senderPsid: string, messages: Array<any>) {

        // Prefix Question
        const rewriteQues = await this.handleQuestion(messages)
        console.log(rewriteQues.status, rewriteQues.response);
        if (!rewriteQues.status) return { text: rewriteQues.response }

        // Get Data from Vector DB
        const posts = await this.getPosts(rewriteQues.response as string)

        // Handle Response to user
        return this.handleAnswer(pageId, senderPsid, rewriteQues.response as string, posts)
    }

    async sendMessageFromAIHuspot(threadId: string, messages: Array<any>) {
        let message = {
            text: "", richText: ""
        }
        // Prefix Question
        // Backend Web Developer l∆∞∆°ng tr√™n 5 tri·ªáu ·ªü Kh√°nh H√≤a
        const rewriteQues = await this.handleQuestion(messages)
        console.log(rewriteQues.status, rewriteQues.response);
        if (!rewriteQues.status) {
            message.text = rewriteQues.response
            message.richText = `<div><span>${rewriteQues.response} üò•üò•üò•</span></div>`
        }
        else {
            // Get Data from Vector DB
            const posts = await this.getPosts(rewriteQues.response as string)

            // Handle Response to user
            if (posts.length == 0) {
                // Ask user give more information 
                message.text = `kh√¥ng th·ªÉ t√¨m th·∫•y b√†i ƒëƒÉng ph√π h·ª£p v·ªõi t·ª´ kh√≥a c·ªßa b·∫°n '${rewriteQues.response}'. B·∫°n h√£y cung c·∫•p nhi·ªÅu th√¥ng tin c·ª• th·ªÉ h∆°n nh∆∞ sau: l∆∞∆°ng mong mu·ªën, ƒë·ªãa ƒëi·ªÉm, ...`, // Need to create prompt to ask user give more information
                    message.richText = `<div><span>${message.text} üò•üò•üò•</span></div>`
            } else {
                message.text = `ƒê√¢y l√† top ${posts.length} b√†i post v·ªÅ t·ª´ kh√≥a '${rewriteQues.response}'.\n ${posts.map(
                    (post, idx) => { return `${idx + 1}. ${post.title}` }
                ).join("\n")}`
                message.richText = `
                <p>ƒê√¢y l√† top ${posts.length} b√†i post v·ªÅ t·ª´ kh√≥a '${rewriteQues.response}'.<a href="${this.clientBaseUrl}/posts?search=${rewriteQues.response}" rel="noopener">Click ƒë·ªÉ xem chi ti·∫øt</a></p>
                <ol>
                ${posts.map(post => `
                <li>
                <a href="${this.clientBaseUrl}/posts/${post.id}" rel="noopener" target="_blank" style="background-color: #ffff04;">
                    ${post.title}</a>&nbsp;<br>
                    ${post.business.name}<br>
                    ${(!/\d/.test(post.minSalaryString)) ? "Th·ªèa thu·∫≠n" : `${post.minSalaryString} - ${post.maxSalaryString}`}<br>
                    ${post.locations.map(location => location.provinceName).join(" - ")}
                </li>`).join("\n")}
                </ol>
                `
            }
        }
        console.log(message.text);
        console.log(message.richText);

        await huspotConversationService.sendMessageFromAIByDefault({
            threadId, text: message.text, richText: message.richText
        })
    }
    async sendMessageFromAssistantHuspot(threadId: string) {
        await huspotConversationService.sendMessageFromAIByDefault({
            threadId, sender: "ASSISTANT", text: `Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t, ch√∫ng t√¥i s·∫Ω tr·∫£ l·ªùi ngay.`, richText: `<div>Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t, ch√∫ng t√¥i s·∫Ω tr·∫£ l·ªùi ngay</div>`
        })
    }


    async readAllChunks(readableStream: ReadableStream) {
        const reader = readableStream.getReader();
        const chunks = [];

        let done, value;
        while (!done) {
            ({ value, done } = await reader.read());
            if (done) {
                return chunks;
            }
            chunks.push(value);
        }
    }

    async handleQuestion(messages: Array<any>) {
        // Handle question and chat history to make an fully question.
        let prompt = `
            ${this.questionPrompt} ${JSON.stringify(messages)}
        `.trim()
        let response = await fetch(`${this.ollamaBaseUrl}/generate`, {
            method: "POST",
            body: JSON.stringify({
                model: this.model_name,
                stream: false,
                prompt: prompt
            }),
        })
        await this.checkResponseNotOk(response)
        const data = await this.getResponseData<OllamaGenerateRes>(response)
        console.log("Ollama Res: ", data.response);

        return JSON.parse(data.response.substring(data.response.indexOf("{"), data.response.indexOf("}") + 1)) as QuestionChatbotResponse
    }

    async handleAnswer(pageId: string, senderPsid: string, rewriteQues: string, posts: PostType[]) {

        if (posts.length == 0) {
            // Ask user give more information 
            return {
                text: `kh√¥ng th·ªÉ t√¨m th·∫•y b√†i ƒëƒÉng ph√π h·ª£p v·ªõi t·ª´ kh√≥a c·ªßa b·∫°n '${rewriteQues}'. B·∫°n h√£y cung c·∫•p nhi·ªÅu th√¥ng tin c·ª• th·ªÉ h∆°n nh∆∞ sau: l∆∞∆°ng mong mu·ªën, ƒë·ªãa ƒëi·ªÉm, ...`, // Need to create prompt to ask user give more information
            }
        }
        const postsCard = posts.map(post => ({
            title: post.title,
            image_url: "https://cdn.sanity.io/images/mz2hls6g/production/b1e56a9c6e1e6d81177cbbc273c788795a00f3c1-6000x4002.jpg?w=828&q=75&fit=clip&auto=format" || `${this.apiBaseUrl}/businesses/${post.business.id}/profileImage`,
            subtitle: `${post.business.name} \n${`${(!/\d/.test(post.minSalaryString)) ? "Th·ªèa thu·∫≠n" : `${post.minSalaryString} - ${post.maxSalaryString}`}`
                } \n${`${post.locations.map(location => location.provinceName).join(" - ")}`
                }`,
            buttons: [
                {
                    "type": "web_url",
                    "title": "See Detail",
                    "url": `${this.clientBaseUrl}/posts/${post.id}`,
                }
            ]
        })).slice(0, 7)// Top 7 posts. Cause it limit 15 posts

        const res = {
            attachment: {
                type: "template",
                payload: {
                    template_type: "generic",
                    elements: postsCard
                }
            }
        }
        // Send First Message to User
        await fbService.sendOnTyping(pageId, senderPsid)
        await fbService.sendMessage(senderPsid, pageId, {
            text: `ƒê√¢y l√† Top ${postsCard.length} b√†i ƒëƒÉng v·ªÅ t·ª´ kh√≥a '${rewriteQues}'. Xem chi ti·∫øt t·∫°i ƒë√¢y: ${this.clientBaseUrl}/posts?search=${rewriteQues}`
        })
        return res
    }

    async getPosts(postName: string) {
        // const res = await fetch(`${this.elasticApiBaseUrl}/api/post?search=${postName}`, {
        //     method: "GET",
        //     headers: {
        //         'Content-Type': 'application/json'
        //     }
        // })
        // await this.checkResponseNotOk(res)
        // return this.getResponseData(res) as PostType[]
        return [] as PostType[]
        return [
            {
                "id": "660fb32bebddec564a76ef5e",
                "title": "AI smart Test",
                "profession": {
                    "id": "65e097a4bfdb92a961c286a6",
                    "name": "B√°n h√†ng / Kinh doanh",
                    categoryId: "65e097a4bfdb92a961c286a5"
                },
                "minSalary": 15000000,
                "minSalaryString": "15 tr",
                "maxSalary": 20000000,
                "maxSalaryString": "20 tr",
                "currency": "VND",
                "level": {
                    "id": "64cdbe0be84b6f0a08a90cee",
                    "name": "Nh√¢n vi√™n"
                },
                "locations": [
                    {
                        "provinceName": "Kh√°nh H√≤a",
                        "specificAddress": "Xu√¢n H√≤a 2"
                    },
                    {
                        "provinceName": "An Giang",
                        "specificAddress": "An GIang 1"
                    }
                ],
                totalViews: 0,
                "business": {
                    "id": "65ffccad48887841f8677c93",
                    "name": "Company Tech",
                    "profileImageId": "6b58410c-e154-444d-a2dd-69ee3ad6c39f"
                },
                "workingFormat": "full-time",
                "applicationDeadline": "2024-08-20",
                "createdAt": "2024-04-05"
            },
            {
                "id": "65e4a54df0456cc31efe9ae0",
                "title": "TR√åNH D∆Ø·ª¢C VI√äN OTC TH√ÅI NGUY√äN - H√íA B√åNH - L√ÄO CAI",
                "profession": {
                    "id": "65e097a4bfdb92a961c286a6",
                    "name": "B√°n h√†ng / Kinh doanh",
                    categoryId: "65e097a4bfdb92a961c286a5"
                },
                "minSalary": -9223372036854775808,
                "minSalaryString": "C·∫°nh tranh",
                "maxSalary": 9223372036854775807,
                "maxSalaryString": "C·∫°nh tranh",
                // "currency": null,
                "level": {
                    "id": "64cdbe0be84b6f0a08a90cee",
                    "name": "Nh√¢n vi√™n"
                },
                "locations": [
                    {
                        "provinceName": "H√≤a B√¨nh",
                        "specificAddress": ""
                    },
                    {
                        "provinceName": "Qu·∫≠n 7",
                        "specificAddress": ""
                    },
                ],
                totalViews: 0,
                "workingFormat": "Nh√¢n vi√™n ch√≠nh th·ª©c",
                "benefits": [
                    {
                        "id": "64cc6b4c1f4068147ecf50b8",
                        "name": "ChƒÉm s√≥c s·ª©c kh·ªèe"
                    },
                    {
                        "id": "64cc6ba91f4068147ecf50bc",
                        "name": "Ph·ª• c·∫•p"
                    },
                    {
                        "id": "64cc6bd11f4068147ecf50be",
                        "name": "ƒê·ªìng ph·ª•c"
                    }
                ],
                "description": "<div class=\"detail-row reset-bullet\"> <h2 class=\"detail-title\">M√¥ t·∫£ C√¥ng vi·ªác</h2> <p>Do nhu c·∫ßu m·ªü r·ªông s·∫£n xu·∫•t kinh doanh, c√¥ng ty C·ªï ph·∫ßn Xu·∫•t nh·∫≠p kh·∫©u Y t·∫ø DOMESCO c√≥ nhu c·∫ßu tuy·ªÉn d·ª•ng nh∆∞ sau:</p> <p><em><u>- N∆°i l√†m vi·ªác: </u></em>TH√ÅI NGUY√äN - H√íA B√åNH - L√ÄO CAI</p> <p><em><u>- </u></em><em><u>M·ª©c l∆∞∆°ng:</u></em> C·∫°nh tranh, t√πy thu·ªôc v√†o nƒÉng l·ª±c v√† hi·ªáu qu·∫£ c·ªßa t·ª´ng ·ª©ng vi√™n</p> <p><em><u>- C√¥ng vi·ªác c·∫ßn tuy·ªÉn d·ª•ng</u></em><em><u>:</u></em> ƒêi ƒë·ªãnh v·ªã theo tuy·∫øn, gi·ªõi thi·ªáu s·∫£n ph·∫©m c·ªßa C√¥ng ty, ChƒÉm s√≥c kh√°ch h√†ng, m·ªü r·ªông v√† ph√°t tri·ªÉn th·ªã tr∆∞·ªùng, tƒÉng ƒë·ªô ph·ªß kh√°ch h√†ng v√† s·∫£n ph·∫©m, l·∫≠p c√°c k·∫ø ho·∫°ch b√°n h√†ng v√† c√°c b√°o c√°o li√™n quan ƒë·∫øn c√¥ng vi·ªác b√°n h√†ng.</p> </div>",
                "yearsOfExperience": "1 - 3 NƒÉm",
                "otherRequirements": "B·∫±ng c·∫•p: Trung c·∫•p</br>ƒê·ªô tu·ªïi: Kh√¥ng gi·ªõi h·∫°n tu·ªïi</br>L∆∞∆°ng: C·∫°nh tranh",
                "requisitionNumber": 13,
                "applicationDeadline": "2024-05-18T00:00:00",
                "jdId": null,
                "recruiterId": null,
                activeStatus: 'Opening',
                createdAt: "",
                "business": {
                    "id": "65e48a4ae9406098c28bcbf5",
                    "name": "C√¥ng ty CP Xu·∫•t Nh·∫≠p Kh·∫©u Y T·∫ø Domesco",
                    "profileImageId": "80c51b20-18c8-4cae-a1d7-badd9080328e"
                }
            },
            {
                "id": "660fb32bebddec564a76ef5e",
                "title": "IT backend Dev",
                "profession": {
                    "id": "65e097a4bfdb92a961c286a6",
                    "name": "B√°n h√†ng / Kinh doanh",
                    categoryId: "65e097a4bfdb92a961c286a5"
                },
                "minSalary": 15000000,
                "minSalaryString": "5 tr",
                "maxSalary": 20000000,
                "maxSalaryString": "20 tr",
                "currency": "VND",
                "level": {
                    "id": "64cdbe0be84b6f0a08a90cee",
                    "name": "Nh√¢n vi√™n"
                },
                "locations": [
                    {
                        "provinceName": "B√¨nh D∆∞∆°ng",
                        "specificAddress": "Xu√¢n H√≤a 2"
                    },
                    {
                        "provinceName": "Th·ªß ƒê·ª©c",
                        "specificAddress": "An GIang 1"
                    }
                ],
                totalViews: 0,
                "business": {
                    "id": "65ffccad48887841f8677c93",
                    "name": "C√¥ng ty TNHH An H√≤a L·∫°c 3",
                    "profileImageId": "6b58410c-e154-444d-a2dd-69ee3ad6c39f"
                },
                "workingFormat": "full-time",
                "applicationDeadline": "2024-08-20",
                "createdAt": "2024-04-05"
            },
        ] as PostType[]
    }
}

const chatService = await new ChatService();

export default chatService