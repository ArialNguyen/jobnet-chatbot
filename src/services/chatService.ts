import BaseService from "@/services/baseService";
import PostType from "@/types/post";
import { QuestionChatbotResponse } from "@/types/ollamaResponse";
import fbService from "@/services/fbService";
import huspotConversationService from "@/services/huspotConversationService";

class ChatService extends BaseService {

    private readonly baseUrl = process.env.NEXT_PUBLIC_BASE_URL

    private readonly elasticApiBaseUrl = process.env.NEXT_PUBLIC_ELASTIC;

    private readonly apiBaseUrl = `${process.env.NEXT_PUBLIC_API_URL}/api`;

    private readonly clientBaseUrl = process.env.NEXT_PUBLIC_CLIENT_URL;

    private questionPrompt_gemini = `
    You are a helpful job search assistant. Please return JSON ( not JSON5 ) describing the user's question in this conversation using the following schema:
    { "normalQuestion": NORMAL, "irrelevantQuestion": IRRELEVANT, "relevant": RELEVANT}
    NORMAL = { "response": str }
    IRRELEVANT = { "response": str }
    RELEVANT = { "response": str, "numberOfList": number}
    All fields are required.
    Important: Only return a single piece of valid JSON text.

    Here is the workflow to apply data into the JSON:
    1. The first thing you need to do is summarize the user's questions from the conversation and always prioritize the latest wishes.
    2. Once you have the user's latest question, do one of the following three things if correct:
    Case 1: In this case make sure both attribute "normalQuestion" and "relevant" is null. If user ask question that are not related to job search support (such as weather, news, etc.), write an apology sentence for not being able to answer questions that are not related to job search and save to "response" of "irrelevantQuestion" field.
    Example for Case 1: User ask "Th·ªùi ti·∫øt h√¥m nay th·∫ø n√†o?" your JSON can be like {"normalQuestion": null, "irrelevantQuestion": {"response": "Xin l·ªói, m√¨nh ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n t√¨m ki·∫øm vi·ªác l√†m. üòî"}, "relevant": null}
    
    Case 2: In this case make sure both attribute "irrelevantQuestion" and "relevant" is null. If the user just say hello, thanks, or asks you how you are Then you will answer naturally like a job search support staff (make it longer and easy to understand) and save your reply to "response" of "normalQuestion" field. 
    Example for Case 2: User say "xin ch√†o" your JSON can be like {"normalQuestion": {"response": "Ch√†o b·∫°n! üëã\n R·∫•t vui ƒë∆∞·ª£c l√†m quen v·ªõi b·∫°n! ü•∞\n  T√¥i l√† chat bot c√≥ th·ªÉ gi√∫p b·∫°n t√¨m vi·ªác l√†m nhanh ch√≥ng. \n"}, "irrelevantQuestion": null, "relevant": null}
    Another example for Case 2: User say "C·∫£m ∆°n" your JSON can be like {"normalQuestion": {"response": " Kh√¥ng c√≥ g√¨! üëã\n R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n. ü•∞\n N·∫øu b·∫°n mu·ªën t√¨m c√¥ng vi·ªác g√¨ h√£y li√™n h·ªá v·ªõi t√¥iüòÅ"}, "irrelevantQuestion": null, "relevant": null}

    Case 3: In this case make sure both attribute "normalQuestion" and "irrelevantQuestion" is null. If the user question is related to the field of job search support, then you will prioritize analyzing the latest messages and analyze only the job title, desired salary, location and summarize them into a short, easy-to-understand sentence and save it to "response" of "relevant" field. The requirements in the analysis are as follows:
    The job title, location must be short and the salary range must be clear (preferably in words) with difficult-to-understand salaries such as: "kh√¥ng l·ªõn h∆°n 10 tri·ªáu" must be clearly translated as "nh·ªè h∆°n m∆∞·ªùi tri·ªáu", "10-20 tri·ªáu" will be "Kho·∫£ng m∆∞·ªùi ƒë·∫øn hai m∆∞∆°i tri·ªáu", ... In addition to the phrases 'kh√¥ng l·ªõn h∆°n' -> 'nh·ªè h∆°n', 'kh√¥ng nh·ªè h∆°n' -> 'l·ªõn h∆°n', 'kh√¥ng d∆∞·ªõi' -> 'l·ªõn h∆°n', 'kh√¥ng v∆∞·ª£t qua' -> 'nh·ªè h∆°n'... you will have to understand and translate more easily in a similar way because those phrases will confuse the algorithm and this is very important to me, Make sure you do not ignore this requirement. Note that you only collect information, absolutely do not arbitrarily provide any additional information if it is not from the user.
    Also in this case, if the user ask to list how many posts (jobs) then you will save the number of listings into "numberOfList" field, otherwise set null into "numberOfList".
    Example for Case 3: User say "T√¥i c·∫ßn t√¨m c√¥ng vi·ªác qu·∫£n tr·ªã kinh doanh l∆∞∆°ng 15-20 tri·ªáu" your JSON can be like {"normalQuestion": null, "irrelevantQuestion": null, "relevant": {"response": "Qu·∫£n tr·ªã kinh doanh l∆∞∆°ng t·ª´ m∆∞·ªùi lƒÉm ƒë·∫øn hai m∆∞∆°i tri·ªáu", "numberOfList": null}}
    Another Example for Case 3: User ask "T√¨m cho t√¥i 5 b√†i ƒëƒÉng v·ªÅ ABC v·ªõi m·ª©c l∆∞ng kh√¥ng l·ªõn h∆°n 10 tri·ªáu" your JSON can be like {"normalQuestion": null, "irrelevantQuestion": null, "relevant": {"response": "ABC v·ªõi m·ª©c l∆∞∆°ng nh·ªè h∆°n m∆∞·ªùi tri·ªáu", "numberOfList": 5}}
    
    Notice: You can use the example above for each case but I want you to create new sentences in 'response' field to see the difference better. And Your answer the sam e language with user and can include some emojis for that situation (work for Case 1 and 2 execept case 3). And each separate sentence must be begin with new line (specifically adding the character '\n' at the end of each sentence).
    Here is conversation:
    {{}}
    `


    private getQuestionPrompt(messages: Array<any>) {
        return this.questionPrompt_gemini.replace("{{}}", messages.join("\n"))
    }

    async getMessage(pageId: string, senderPsid: string, messages: Array<any>) {

        // Prefix Question
        const rewriteQues = await this.handleQuestion(messages) // 0,1,2 

        if (rewriteQues.normalQuestion) return { text: rewriteQues.normalQuestion.response }
        else if (rewriteQues.irrelevantQuestion) return { text: rewriteQues.irrelevantQuestion.response }

        // Get Data from Vector DB
        const numberOfList = rewriteQues.relevant!!.numberOfList || 7

        const posts = (await this.getPosts(rewriteQues.relevant!!.response as string)).slice(0, numberOfList)

        // Handle Response to user 
        return this.handleAnswer(pageId, senderPsid, rewriteQues.relevant!!.response as string, posts)
    }

    async sendMessageFromAIHubspot(threadId: string, messages: Array<any>) {
        let message = {
            text: "", richText: ""
        }
        // Prefix Question
        const rewriteQues = await this.handleQuestion(messages)
        console.log("rewriteQues: ", rewriteQues);
        
        if (rewriteQues.irrelevantQuestion) {
            const res = rewriteQues.irrelevantQuestion.response.split("\n").map(sentence => `<p>${sentence}</p>`).join("")
            message.text = rewriteQues.irrelevantQuestion.response
            message.richText = `<div>${res}</div>`
        }
        else if (rewriteQues.normalQuestion) {
            const res = rewriteQues.normalQuestion.response.split("\n").map(sentence => `<p>${sentence}</p>`).join("")
            
            message.text = rewriteQues.normalQuestion.response
            message.richText = `<div>${res}</div>`
        }
        else {
            const numberOfList = rewriteQues.relevant!!.numberOfList || 7
            // Get Data from Vector DB
            const posts = (await this.getPosts(rewriteQues.relevant!!.response as string)).slice(0, numberOfList)

            // Handle Response to user
            if (posts.length == 0) {
                // Ask user give more information 
                message.text = `kh√¥ng th·ªÉ t√¨m th·∫•y b√†i ƒëƒÉng ph√π h·ª£p v·ªõi t·ª´ kh√≥a c·ªßa b·∫°n '${rewriteQues.relevant!!.response}'. B·∫°n h√£y cung c·∫•p nhi·ªÅu th√¥ng tin c·ª• th·ªÉ h∆°n nh∆∞ sau: l∆∞∆°ng mong mu·ªën, ƒë·ªãa ƒëi·ªÉm, ...`, // Need to create prompt to ask user give more information
                    message.richText = `<div><span>${message.text} üò•üò•üò•</span></div>`
            } else {
                message.text = `ƒê√¢y l√† top ${posts.length} b√†i post v·ªÅ t·ª´ kh√≥a '${rewriteQues.relevant!!.response}'.\n ${posts.map(
                    (post, idx) => { return `${idx + 1}. ${post.title}` }
                ).join("\n")}`
                message.richText = `
                <p>ƒê√¢y l√† top ${posts.length} b√†i post v·ªÅ t·ª´ kh√≥a '${rewriteQues.relevant!!.response}'.<a href="${this.clientBaseUrl}/posts?search=${rewriteQues.relevant!!.response}" rel="noopener">Click ƒë·ªÉ xem chi ti·∫øt</a></p>
                <ol>
                ${posts.map(post => `
                <li>
                <a href="${this.clientBaseUrl}/posts/${post.id}" rel="noopener" target="_blank" style="background-color: #ffff04;">
                    ${post.title}</a>&nbsp;<br>
                    ${post.business.name}<br>
                    ${(!/\d/.test(post.minSalaryString)) ? "Th·ªèa thu·∫≠n" : `${post.minSalaryString} - ${post.maxSalaryString}`}<br>
                    ${post.locations.map(location => location.provinceName).join(" - ")}
                </li>`).join("\n")}
                </ol>
                `
            }
        }

        await huspotConversationService.sendMessageFromAIByDefault({
            threadId, text: message.text, richText: message.richText
        })
    }
    async sendMessageFromAssistantHuspot(threadId: string) {
        await huspotConversationService.sendMessageFromAIByDefault({
            threadId, sender: "ASSISTANT", text: `Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t, ch√∫ng t√¥i s·∫Ω tr·∫£ l·ªùi ngay.`, richText: `<div>Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t, ch√∫ng t√¥i s·∫Ω tr·∫£ l·ªùi ngay üëãü•∞üëã</div>`
        })
    }

    async handleQuestion(messages: Array<any>) {
        let prompt = this.getQuestionPrompt(messages).trim()

        let responseObj = {} as QuestionChatbotResponse
        let response = await fetch(`${this.baseUrl}/api`, {
            method: "POST",
            body: JSON.stringify({
                prompt
            }),
        })
        this.checkResponseNotOk(response)
        try {
            responseObj = await this.getResponseData<QuestionChatbotResponse>(response)
        } catch (error) {
            throw new Error("WRONG_FORMAT_OLLAMA_RESPONE")
        }
        return responseObj
    }

    async handleAnswer(pageId: string, senderPsid: string, rewriteQues: string, posts: PostType[]) {

        if (posts.length == 0) {
            // Ask user give more information 
            return {
                text: `kh√¥ng th·ªÉ t√¨m th·∫•y b√†i ƒëƒÉng ph√π h·ª£p v·ªõi t·ª´ kh√≥a c·ªßa b·∫°n '${rewriteQues}'. B·∫°n h√£y cung c·∫•p nhi·ªÅu th√¥ng tin c·ª• th·ªÉ h∆°n nh∆∞ sau: l∆∞∆°ng mong mu·ªën, ƒë·ªãa ƒëi·ªÉm, ...`, // Need to create prompt to ask user give more information
            }
        }
        const postsCard = posts.map(post => ({
            title: post.title,
            image_url: "https://cdn.sanity.io/images/mz2hls6g/production/b1e56a9c6e1e6d81177cbbc273c788795a00f3c1-6000x4002.jpg?w=828&q=75&fit=clip&auto=format" || `${this.apiBaseUrl}/businesses/${post.business.id}/profileImage`,
            subtitle: `${post.business.name} \n${`${(!/\d/.test(post.minSalaryString)) ? "Th·ªèa thu·∫≠n" : `${post.minSalaryString} - ${post.maxSalaryString}`}`
                } \n${`${post.locations.map(location => location.provinceName).join(" - ")}`
                }`,
            buttons: [
                {
                    "type": "web_url",
                    "title": "See Detail",
                    "url": `${this.clientBaseUrl}/posts/${post.id}`,
                }
            ]
        }))

        const res = {
            attachment: {
                type: "template",
                payload: {
                    template_type: "generic",
                    elements: postsCard
                }
            }
        }
        // Send First Message to User
        await fbService.sendOnTyping(pageId, senderPsid)
        await fbService.sendMessage(senderPsid, pageId, {
            text: `ƒê√¢y l√† Top ${postsCard.length} b√†i ƒëƒÉng v·ªÅ t·ª´ kh√≥a '${rewriteQues}'. Xem chi ti·∫øt t·∫°i ƒë√¢y: ${this.clientBaseUrl}/posts?search=${rewriteQues}`
        })
        return res
    }

    async getPosts(postName: string) {
        const res = await fetch(`${this.elasticApiBaseUrl}/api/post?search=${postName}`, {
            method: "GET",
            headers: {
                'Content-Type': 'application/json'
            }
        })
        await this.checkResponseNotOk(res)
        return this.getResponseData(res) as PostType[]
        // return [] as PostType[]
        // return [
        //     {
        //         "id": "660fb32bebddec564a76ef5e",
        //         "title": "AI smart Test",
        //         "profession": {
        //             "id": "65e097a4bfdb92a961c286a6",
        //             "name": "B√°n h√†ng / Kinh doanh",
        //             categoryId: "65e097a4bfdb92a961c286a5"
        //         },
        //         "minSalary": 15000000,
        //         "minSalaryString": "15 tr",
        //         "maxSalary": 20000000,
        //         "maxSalaryString": "20 tr",
        //         "currency": "VND",
        //         "level": {
        //             "id": "64cdbe0be84b6f0a08a90cee",
        //             "name": "Nh√¢n vi√™n"
        //         },
        //         "locations": [
        //             {
        //                 "provinceName": "Kh√°nh H√≤a",
        //                 "specificAddress": "Xu√¢n H√≤a 2"
        //             },
        //             {
        //                 "provinceName": "An Giang",
        //                 "specificAddress": "An GIang 1"
        //             }
        //         ],
        //         totalViews: 0,
        //         "business": {
        //             "id": "65ffccad48887841f8677c93",
        //             "name": "Company Tech",
        //             "profileImageId": "6b58410c-e154-444d-a2dd-69ee3ad6c39f"
        //         },
        //         "workingFormat": "full-time",
        //         "applicationDeadline": "2024-08-20",
        //         "createdAt": "2024-04-05"
        //     },
        //     {
        //         "id": "65e4a54df0456cc31efe9ae0",
        //         "title": "TR√åNH D∆Ø·ª¢C VI√äN OTC TH√ÅI NGUY√äN - H√íA B√åNH - L√ÄO CAI",
        //         "profession": {
        //             "id": "65e097a4bfdb92a961c286a6",
        //             "name": "B√°n h√†ng / Kinh doanh",
        //             categoryId: "65e097a4bfdb92a961c286a5"
        //         },
        //         "minSalary": -9223372036854775808,
        //         "minSalaryString": "C·∫°nh tranh",
        //         "maxSalary": 9223372036854775807,
        //         "maxSalaryString": "C·∫°nh tranh",
        //         // "currency": null,
        //         "level": {
        //             "id": "64cdbe0be84b6f0a08a90cee",
        //             "name": "Nh√¢n vi√™n"
        //         },
        //         "locations": [
        //             {
        //                 "provinceName": "H√≤a B√¨nh",
        //                 "specificAddress": ""
        //             },
        //             {
        //                 "provinceName": "Qu·∫≠n 7",
        //                 "specificAddress": ""
        //             },
        //         ],
        //         totalViews: 0,
        //         "workingFormat": "Nh√¢n vi√™n ch√≠nh th·ª©c",
        //         "benefits": [
        //             {
        //                 "id": "64cc6b4c1f4068147ecf50b8",
        //                 "name": "ChƒÉm s√≥c s·ª©c kh·ªèe"
        //             },
        //             {
        //                 "id": "64cc6ba91f4068147ecf50bc",
        //                 "name": "Ph·ª• c·∫•p"
        //             },
        //             {
        //                 "id": "64cc6bd11f4068147ecf50be",
        //                 "name": "ƒê·ªìng ph·ª•c"
        //             }
        //         ],
        //         "description": "<div class=\"detail-row reset-bullet\"> <h2 class=\"detail-title\">M√¥ t·∫£ C√¥ng vi·ªác</h2> <p>Do nhu c·∫ßu m·ªü r·ªông s·∫£n xu·∫•t kinh doanh, c√¥ng ty C·ªï ph·∫ßn Xu·∫•t nh·∫≠p kh·∫©u Y t·∫ø DOMESCO c√≥ nhu c·∫ßu tuy·ªÉn d·ª•ng nh∆∞ sau:</p> <p><em><u>- N∆°i l√†m vi·ªác: </u></em>TH√ÅI NGUY√äN - H√íA B√åNH - L√ÄO CAI</p> <p><em><u>- </u></em><em><u>M·ª©c l∆∞∆°ng:</u></em> C·∫°nh tranh, t√πy thu·ªôc v√†o nƒÉng l·ª±c v√† hi·ªáu qu·∫£ c·ªßa t·ª´ng ·ª©ng vi√™n</p> <p><em><u>- C√¥ng vi·ªác c·∫ßn tuy·ªÉn d·ª•ng</u></em><em><u>:</u></em> ƒêi ƒë·ªãnh v·ªã theo tuy·∫øn, gi·ªõi thi·ªáu s·∫£n ph·∫©m c·ªßa C√¥ng ty, ChƒÉm s√≥c kh√°ch h√†ng, m·ªü r·ªông v√† ph√°t tri·ªÉn th·ªã tr∆∞·ªùng, tƒÉng ƒë·ªô ph·ªß kh√°ch h√†ng v√† s·∫£n ph·∫©m, l·∫≠p c√°c k·∫ø ho·∫°ch b√°n h√†ng v√† c√°c b√°o c√°o li√™n quan ƒë·∫øn c√¥ng vi·ªác b√°n h√†ng.</p> </div>",
        //         "yearsOfExperience": "1 - 3 NƒÉm",
        //         "otherRequirements": "B·∫±ng c·∫•p: Trung c·∫•p</br>ƒê·ªô tu·ªïi: Kh√¥ng gi·ªõi h·∫°n tu·ªïi</br>L∆∞∆°ng: C·∫°nh tranh",
        //         "requisitionNumber": 13,
        //         "applicationDeadline": "2024-05-18T00:00:00",
        //         "jdId": null,
        //         "recruiterId": null,
        //         activeStatus: 'Opening',
        //         createdAt: "",
        //         "business": {
        //             "id": "65e48a4ae9406098c28bcbf5",
        //             "name": "C√¥ng ty CP Xu·∫•t Nh·∫≠p Kh·∫©u Y T·∫ø Domesco",
        //             "profileImageId": "80c51b20-18c8-4cae-a1d7-badd9080328e"
        //         }
        //     },
        //     {
        //         "id": "660fb32bebddec564a76ef5e",
        //         "title": "IT backend Dev",
        //         "profession": {
        //             "id": "65e097a4bfdb92a961c286a6",
        //             "name": "B√°n h√†ng / Kinh doanh",
        //             categoryId: "65e097a4bfdb92a961c286a5"
        //         },
        //         "minSalary": 15000000,
        //         "minSalaryString": "5 tr",
        //         "maxSalary": 20000000,
        //         "maxSalaryString": "20 tr",
        //         "currency": "VND",
        //         "level": {
        //             "id": "64cdbe0be84b6f0a08a90cee",
        //             "name": "Nh√¢n vi√™n"
        //         },
        //         "locations": [
        //             {
        //                 "provinceName": "B√¨nh D∆∞∆°ng",
        //                 "specificAddress": "Xu√¢n H√≤a 2"
        //             },
        //             {
        //                 "provinceName": "Th·ªß ƒê·ª©c",
        //                 "specificAddress": "An GIang 1"
        //             }
        //         ],
        //         totalViews: 0,
        //         "business": {
        //             "id": "65ffccad48887841f8677c93",
        //             "name": "C√¥ng ty TNHH An H√≤a L·∫°c 3",
        //             "profileImageId": "6b58410c-e154-444d-a2dd-69ee3ad6c39f"
        //         },
        //         "workingFormat": "full-time",
        //         "applicationDeadline": "2024-08-20",
        //         "createdAt": "2024-04-05"
        //     },
        // ] as PostType[]
    }
}

const chatService = await new ChatService();

export default chatService